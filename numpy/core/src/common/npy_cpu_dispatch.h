#ifndef NPY_CPU_DISPATCH_H_
#define NPY_CPU_DISPATCH_H_

#include "npy_cpu_features.h" // NPY_CPU_HAVE
#include "numpy/utils.h" // NPY_EXPAND, NPY_CAT
/*
 * All definitions that start with prefix NPY__CPU_DISPATCH *
 * are defined by generated config header for the dispatchable-source
 * and that with prefix NPY__CPU_TARGET_ * defined by target C wrappers.
 */
#ifdef NPY_DISABLE_OPTIMIZATION
    #define NPY__CPU_DISPATCH_CALL(MACRO_TO_CALL, ...)
    #define NPY__CPU_DISPATCH_BASELINE_CALL(MACRO_TO_CALL, ...) \
        NPY_EXPAND(MACRO_TO_CALL(__VA_ARGS__))
#else
    // bool maybe not a compiler token (stdbool.h)
    #if defined(__powerpc64__) && !defined(__cplusplus) && defined(bool)
        #define NPY__DISPATCH_DEFBOOL
        typedef bool npy__dispatch_bkbool;
    #endif
    // AUTOGENERATED, contains all CPU features defintions and headers
    #include "_cpu_dispatch.h"
    #ifdef NPY_HAVE_VSX
        /*
         * altivec.h header contains the definitions(bool, vector, pixel),
         * usually in c++ we undefine them after including the header.
         * it's better anyway to take them off and use built-in
         * types(__vector, __pixel, __bool) instead,
         * since c99 supports bool variables which may lead to ambiguous errors.
         *
         * NOTE: if bool wasn't a compiler token, a redefine warning will be
         * raised by the compiler during include '_cpu_dispatch.h'.
        */
        #undef bool
        #undef vector
        #undef pixel
        #ifdef NPY__DISPATCH_DEFBOOL
            #define bool npy__dispatch_bkbool
        #endif
    #endif
#endif // NPY_DISABLE_OPTIMIZATION

#define __NPY_CPU_NOP(X)
// Multiple declare of prototype with add targeted CPU features as suffix
#define NPY_CPU_DISPATCH_DECLARE(FN, ARGS) \
    NPY__CPU_DISPATCH_CALL(__NPY_CPU_NOP, __NPY_CPU_DISPATCH_DECLARE, FN, ARGS) \
    NPY__CPU_DISPATCH_BASELINE_CALL(__NPY_CPU_DISPATCH_DECLARE_B, FN, ARGS)

// Same as `NPY_CPU_DISPATCH_DECLARE` but exclude CPU baseline
#define NPY_CPU_DISPATCH_DECLARE_XB(FN, ARGS) \
    NPY__CPU_DISPATCH_CALL(__NPY_CPU_NOP, __NPY_CPU_DISPATCH_DECLARE, FN, ARGS)

#define __NPY_CPU_DISPATCH_DECLARE(NONE, TARGET_NAME, FN, ARGS) \
    NPY_CAT(FN ## _, TARGET_NAME) NPY_EXPAND(ARGS);
// note: baseline is declared without any suffix
#define __NPY_CPU_DISPATCH_DECLARE_B(FN, ARGS) \
    FN NPY_EXPAND(ARGS);

// Same as `NPY_CPU_DISPATCH_DECLARE()` but doesn't requires arguments
#define NPY_CPU_DISPATCH_DECLAREX(FN) \
    NPY__CPU_DISPATCH_CALL(__NPY_CPU_NOP, __NPY_CPU_DISPATCH_DECLAREX, FN) \
    NPY__CPU_DISPATCH_BASELINE_CALL(__NPY_CPU_DISPATCH_DECLAREX_B, FN)

// Same as `NPY_CPU_DISPATCH_DECLAREX_XB` but doesn't requires arguments
#define NPY_CPU_DISPATCH_DECLAREX_XB(FN) \
    NPY__CPU_DISPATCH_CALL(__NPY_CPU_NOP, __NPY_CPU_DISPATCH_DECLAREX, FN)

#define __NPY_CPU_DISPATCH_DECLAREX(NONE, TARGET_NAME, FN) \
    NPY_CAT(FN ## _, TARGET_NAME);
// note: baseline is declared without any suffix
#define __NPY_CPU_DISPATCH_DECLAREX_B(FN) FN;

/*
 * Call a function that suffixed with targeted CPU features after
 * checking the availability in runtime,
 * the priority depends on the highest interest and it failback to baseline
 * if none of the targeted features are available.
 */
#define NPY_CPU_DISPATCH_CALL(FN, ARGS) \
    if (0) {} \
    NPY__CPU_DISPATCH_CALL(NPY_CPU_HAVE, __NPY_CPU_DISPATCH_CALL, FN, ARGS) \
    NPY__CPU_DISPATCH_BASELINE_CALL(__NPY_CPU_DISPATCH_CALL_B, FN, ARGS)

/* Same as `NPY_CPU_DISPATCH_CALL` but exclude failback to CPU baseline */
#define NPY_CPU_DISPATCH_CALL_XB(FN, ARGS) \
    if (0) {} \
    NPY__CPU_DISPATCH_CALL(NPY_CPU_HAVE, __NPY_CPU_DISPATCH_CALL, FN, ARGS)

#define __NPY_CPU_DISPATCH_CALL(CHECK, TARGET_NAME, FN, ARGS) \
    else if (CHECK) { NPY_CAT(NPY_CAT(FN, _), TARGET_NAME) ARGS; }
#define __NPY_CPU_DISPATCH_CALL_B(FN, ARGS) \
    else { FN NPY_EXPAND(ARGS); }

/*
 * Assign a function to a variable that suffixed with targeted CPU features
 * after checking the availability in runtime.
 * the priority depends on the highest interest and it failback
 * to baseline if none of the targeted features are available.
*/
#define NPY_CPU_DISPATCH_ASSIGN(VAR, FN) \
    NPY_CPU_DISPATCH_CALL(VAR = FN, __NPY_CPU_NOP(X))

#define NPY_CPU_DISPATCH_ASSIGN_XB(VAR, FN) \
    NPY_CPU_DISPATCH_CALL_XB(VAR = FN, __NPY_CPU_NOP(X))

/*
 * concat `@NAME` with current targeted CPU feature and it should be called from dispatch file,
 * mainly used to define a function that declared by `NPY_CPU_DISPATCH_DECLARE`
 * that also be called later by `NPY_CPU_DISPATCH_CALL` or `NPY_CPU_DISPATCH_ASSIGN`
*/
#ifdef NPY__CPU_TARGET_MODE
    #define NPY_CPU_DISPATCH_CURFX(NAME) \
        NPY_CAT(NPY_CAT(NAME, _), NPY__CPU_TARGET_CURRENT)
#else
    #define NPY_CPU_DISPATCH_CURFX(NAME) NAME
#endif

#endif // NPY_CPU_DISPATCH_H_
